" Vundle and plugins
" ========================================================================

" Vundle not installed?  Here's how to get it set up:
" 1. mkdir -p ~/.vim/bundle
" 2. cd ~/.vim/bundle
" 3. git clone https://github.com/VundleVim/Vundle.vim.git
" 4. Start Vim
" 5. :PluginInstall
" 6. Happy Vimming!

" Helpful Vundle commands:
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
" see :h vundle for more details or wiki for FAQ
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" ========================================================================
" START VUNDLE PLUGINS
" ========================================================================
" (Vundle.vim must always be first)
Plugin 'gmarik/Vundle.vim'                 " Vundle vundles Vundle

" ========================================================================
" Plugins that don't need configuring
" ========================================================================
Plugin 'PurpleGuitar/vim-croz-colorscheme'  " Craig's color scheme
Plugin 'tpope/vim-sensible'                 " Sensible defaults for vim settings
Plugin 'tpope/vim-fugitive'                 " Git integration (:GStatus, :GPush, etc.)
Plugin 'tpope/vim-unimpaired'               " Shortcuts, such as ]b (:bnext), ]q (:cnext), an ]e (exchange line)
Plugin 'tomtom/tcomment_vim'                " Sophisticated commenting, e.g. Ctrl-// to comment
Plugin 'guns/xterm-color-table.vim'         " Display a color chart of XTerm color codes
Plugin 'tmux-plugins/vim-tmux'              " Syntax support for tmux files
Plugin 'pangloss/vim-javascript'            " Syntax handler for JavaScript
Plugin 'elzr/vim-json'                      " Syntax handling for JSON
Plugin 'nblock/vim-dokuwiki'                " Syntax highlighting for Dokuwiki text files
Plugin 'Raimondi/delimitMate'               " Automatically close quote, parens, brackets, etc.
Plugin 'tommcdo/vim-exchange'               " Exchange chunks of text
Plugin 'kshenoy/vim-signature'              " Show marks in gutter
Plugin 'tpope/vim-speeddating'              " Increment/decrement dates
Plugin 'wzhliang/ttfzoom.vim'               " Zoom with Ctrl-mousewheel
Plugin 'severin-lemaignan/vim-minimap'      " Minimap
Plugin 'ynkdir/vim-vimlparser'              " VimL parser
Plugin 'syngan/vim-vimlint'                 " Vim linter
Plugin 'ctrlpvim/ctrlp.vim'                 " Fast file finder
Plugin 'chrisbra/csv.vim'                   " csv file support
Plugin 'kovisoft/slimv'                     " Lisp/SLIME support
Plugin 'tpope/vim-abolish'                  " Tools for smart replace, mangling/demangling, camelCasing, etc.
Plugin 'xolox/vim-misc'                     " Libs for plugins by xolox

" ========================================================================
" Devicons
" ========================================================================
Plugin 'ryanoasis/vim-devicons'             " Icons
let g:airline_powerline_fonts = 1

" ========================================================================
" Language Pack (Polyglot)
" ========================================================================
Plugin 'sheerun/vim-polyglot'               " Language pack
let g:polyglot_disabled = ['markdown']

" ========================================================================
" Deoplete
" ========================================================================
if has('nvim')
    Plugin 'shougo/deoplete.nvim'
    let g:deoplete#enable_at_startup = 1
endif


" ========================================================================
" NeoComplete
" ========================================================================
if !has('nvim')
    Plugin 'shougo/neocomplete.vim'
    let g:neocomplete#enable_at_startup = 1
endif


" ========================================================================
" Better Whitespace
" ========================================================================
Plugin 'ntpeters/vim-better-whitespace'     "whitespace highlighter

" Strip whitespace on save
autocmd BufEnter * EnableStripWhitespaceOnSave

" ========================================================================
" Tagbar
" ========================================================================
Plugin 'majutsushi/tagbar'                 " Sidebar for code
let g:tagbar_sort = 0
nmap <silent> <leader>tags :TagbarToggle<CR>


" ========================================================================
" EasyTags
" ========================================================================
Plugin 'xolox/vim-easytags'                 " Auto ctag generator
set tags=./tags;,~/.vimtags

" Sensible defaults
let g:easytags_events = ['BufReadPost', 'BufWritePost']
let g:easytags_async = 1
let g:easytags_dynamic_files = 2
let g:easytags_resolve_links = 1
let g:easytags_suppress_ctags_warning = 1


" ========================================================================
" Golang support
" ========================================================================
Plugin 'fatih/vim-go'                      " Golang tools
let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }

let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_fields = 1
let g:go_highlight_types = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1

" Automatic import insertion
let g:go_fmt_command = "goimports"


" ========================================================================
" Voom outliner
" ========================================================================
Plugin 'vim-voom/VOoM'                     " Outliner for use with e.g. Pandoc/Markdown text files
let g:voom_always_allow_move_left = 1
" let g:voom_tab_key = "<C-Tab>"

" ========================================================================
" Highlighting
" ========================================================================
Plugin 'kergoth/vim-hilinks'               " Show highlighting at the cursor
let g:hilinks_nobeval= 1

" ========================================================================
" Autoformat
" ========================================================================
Plugin 'Chiel92/vim-autoformat'

" Auto-format certain file types
function s:maybe_auto_format()
    let autoformat_filetypes = ['pandoc']
    if index(autoformat_filetypes, &filetype) >= 0
        :Autoformat
    endif
endfunction
command! MaybeAutoformat call s:maybe_auto_format()
autocmd BufWrite * :MaybeAutoformat

let g:formatdef_my_custom_cs = '"astyle --mode=cs --style=break --indent-namespaces"'
let g:formatters_cs = ['my_custom_cs']

" Trim extra whitespace on save -- workaround for astyle
" From: http://stackoverflow.com/questions/7495932/how-can-i-trim-blank-lines-at-the-end-of-file-in-vim
function TrimEndLines()
    let save_cursor = getpos(".")
    :silent! %s#\($\n\s*\)\+\%$##
    call setpos('.', save_cursor)
endfunction
au BufWritePre *.cs call TrimEndLines()

" ========================================================================
" Easy Align
" ========================================================================
Plugin 'junegunn/vim-easy-align'
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)


" ========================================================================
" Syntastic
" ========================================================================
Plugin 'scrooloose/syntastic'
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_error_symbol = '✘'
let g:syntastic_warning_symbol = "▲"


" ========================================================================
" Airline (Powerline/Status)
" ========================================================================
Plugin 'vim-airline/vim-airline.git'
Plugin 'vim-airline/vim-airline-themes.git'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline_powerline_fonts = 1
set noshowmode  "hide default status line


" ========================================================================
" Git Gutter
" ========================================================================
Plugin 'airblade/vim-gitgutter'
let g:gitgutter_sign_column_always = 1
nmap [h <Plug>GitGutterPrevHunk
nmap ]h <Plug>GitGutterNextHunk

" Only display hunks if the diff is non-zero
"let g:airline#extensions#hunks#non_zero_only = 1

" No Mappings
"let g:gitgutter_map_keys = 0

" ========================================================================
" Pandoc
" ========================================================================
Plugin 'vim-pandoc/vim-pandoc'
Plugin 'vim-pandoc/vim-pandoc-syntax'
let g:pandoc#formatting#mode = 'h'                               " hard line breaks
let g:pandoc#keyboard#sections#header_style = 's'                " Use setext style headers for 1 and 2
let g:pandoc#formatting#textwidth = 75                           " Text width for Pandoc documents
let g:pandoc#folding#level = 999
let g:pandoc#syntax#conceal#blacklist = ["emdashes", "endashes", "newline", "image"]
let g:pandoc#folding#fdc = 0                                     " Don't show foldlevel column
let g:pandoc#formatting#equalprg='pandoc -t markdown --standalone --columns 75'
let g:pandoc#formatting#extra_equalprg=''
let g:pandoc#folding#fold_yaml = 1
let g:pandoc#syntax#conceal#urls = 1

" " Use tab to jump to next link
autocmd FileType pandoc nnoremap <Tab> /\[[^]]\+\][[(]\<bar><[^!>]\+><CR>:nohlsearch<CR>
autocmd FileType pandoc nnoremap <S-Tab> ?\[[^]]\+\][[(]\<bar><[^!>]\+><CR>:nohlsearch<CR>

" Remap goto definition to goto link
autocmd FileType pandoc nmap gd <Leader>gl

" Show line breaks
autocmd FileType pandoc set showbreak=....

" Shortcuts for generating pandoc docs
" autocmd FileType pandoc nnoremap <Leader>pp  :Pandoc  html --standalone --filter=~/repos/pandoc-include/IncludeFilter.hs --filter=~/Dropbox/projects/pandoc-filters/graphviz.py<CR>
" autocmd FileType pandoc nnoremap <Leader>pb  :Pandoc! html --standalone --filter=~/repos/pandoc-include/IncludeFilter.hs --filter=~/Dropbox/projects/pandoc-filters/graphviz.py<CR>
autocmd FileType pandoc nnoremap <Leader>pp  :Pandoc  html --standalone<CR>
autocmd FileType pandoc nnoremap <Leader>pb  :Pandoc! html --standalone<CR>
"

" ========================================================================
" Pandoc Tasks - task management in Pandoc
" ========================================================================
Plugin  'PurpleGuitar/vim-pandoc-tasks'

" Special commands for todoing
autocmd FileType pandoc nnoremap <C-Space>   :PandocTaskToggle<CR>
autocmd FileType pandoc vnoremap <C-Space>   :PandocTaskToggle<CR>gv
autocmd FileType pandoc nnoremap <NUL>       :PandocTaskToggle<CR>
autocmd FileType pandoc vnoremap <NUL>       :PandocTaskToggle<CR>gv
autocmd FileType pandoc nnoremap <Leader>tx  :PandocTaskDelete<CR>
autocmd FileType pandoc vnoremap <Leader>tx  :PandocTaskDelete<CR>gv

" If the home directory of the wiki is set, set up our shortcuts
if !empty($VP_WIKI)

    " Create insta-journal-entry for quick notes
    function! s:new_journal_entry()
        let timestamp_filename = strftime( "$VP_WIKI/pages/journal/%Y-%m-%d_%H-%M-%S.md", localtime() )
        execute "e " . timestamp_filename
    endfunction
    command! NewJournalEntry call s:new_journal_entry()
    autocmd FileType pandoc nnoremap <Leader>nje  :NewJournalEntry<CR>

    " Create 'Today' page
    function! s:create_today_page()
        let timestamp_filename = strftime( "$VP_WIKI/pages/journal/%Y-%m-%d_%H-%M-%S_daily.md", localtime() )
        execute "edit " . timestamp_filename
        " execute "buffer " . timestamp_filename
        execute "read $VP_WIKI/templates/daily.md"
        execute "write"
        execute "normal! ggmT"
        execute "edit"
    endfunction
    command! NewDay call s:create_today_page()

    " Arrange windows
    function! s:arrange_windows()
        execute "edit $VP_WIKI/pages/index.md"
        execute "only"
        execute "NERDTreeFocus"
        execute "vertical resize 40"
        execute "wincmd p"
        execute "copen"
        execute "wincmd p"
        " execute "wincmd v"
        " normal! 'T
    endfunction
    command! ArrangeWindows call s:arrange_windows()
    nnoremap <Leader>aw :ArrangeWindows<CR>
    nnoremap <Leader>ar :ArrangeWindows<CR>

    " Make quickfix list pretty
    function! s:todo_quickfix(command_name)
        copen
        cd $VP_WIKI
        execute a:command_name . " 'pages/**/*.md'"
        setlocal modifiable
        1,$EasyAlign 4/ /
        setlocal nomodifiable
        setlocal nomodified
        execute "normal! WWWWzs"
    endfunction
    command! TodoQuickfix call s:todo_quickfix('PandocTaskListTodoSorted')
    command! TodoQuickfixAll call s:todo_quickfix('PandocTaskListUnfinishedSorted')
    command! TodoQuickfixAllUnsorted call s:todo_quickfix('PandocTaskListUnfinished')
    command! TodoQuickfixWait call s:todo_quickfix('PandocTaskListWaitSorted')
    command! TodoQuickfixDone call s:todo_quickfix('PandocTaskListDoneSorted')
    command! TodoQuickfixTasks call s:todo_quickfix('PandocTaskListTasksSorted')
    nnoremap <Leader>qtt :TodoQuickfix<CR>
    nnoremap <Leader>qta :TodoQuickfixAll<CR>
    nnoremap <Leader>qtu :TodoQuickfixAllUnsorted<CR>
    nnoremap <Leader>qtd :TodoQuickfixDone<CR>
    nnoremap <Leader>qtw :TodoQuickfixWait<CR>
    nnoremap <Leader>qte :TodoQuickfixTasks<CR>

else

    " echom "Environment variable VP_WIKI not set, no wiki available"

endif

" Insert journal entry at bottom of file
nnoremap <Leader>je Go<CR><C-o>0## <Esc>"=strftime("%a %b %d %Y %I:%M %p")<CR>po<CR>
inoremap <Leader>je <Esc>Go<CR><C-o>0## <Esc>"=strftime("%a %b %d %Y %I:%M %p")<CR>po<CR>

" ========================================================================
" NERDTree file browser
" ========================================================================
Plugin 'scrooloose/nerdtree'
let g:nerdtree_tabs_open_on_console_startup = 1
let g:NERDTreeShowHidden = 1

nnoremap <Leader>nt :NERDTreeFind<CR>

" From: http://superuser.com/questions/195022/vim-how-to-synchronize-nerdtree-with-current-opened-tab-file-path
" returns true iff is NERDTree open/active
function! s:isNTOpen()
    return exists("t:NERDTreeBufName") && (bufwinnr(t:NERDTreeBufName) != -1)
endfunction

" calls NERDTreeFind iff NERDTree is active, current window contains a modifiable file, and we're not in vimdiff
function! s:syncTree()
    if &modifiable && s:isNTOpen() && strlen(expand('%')) > 0 && !&diff
        let l:curwinnr = winnr()
        NERDTreeFind
        exec l:curwinnr . "wincmd w"
        "wincmd p
    endif
endfunction

autocmd BufEnter * call s:syncTree()

" ========================================================================
" NERDTree Git plugin
" ========================================================================
Plugin 'Xuyuanp/nerdtree-git-plugin'

" let g:NERDTreeShowIgnoredStatus = 1

" ========================================================================
" Quick Scope - Highlights targets for f, F, t, and T motions
" ========================================================================
" Plugin 'unblevable/quick-scope'
" let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']


" ========================================================================
" Gundo -- navigate undo tree
" ========================================================================
Plugin 'sjl/gundo.vim'
nnoremap <Leader>gu :GundoToggle<CR>



" ========================================================================
" Xolox shell - supports fullscreen, among other things
" ========================================================================
Plugin 'xolox/vim-shell'
let g:shell_fullscreen_always_on_top = 0

" ========================================================================
" Craig's Utils
" ========================================================================
Plugin  'PurpleGuitar/vim-croz-utils'
let g:croz_utils_date_mappings = 1

" ========================================================================
" END VUNDLE PLUGINS
" ========================================================================
call vundle#end()
